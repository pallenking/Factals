# .lldbinit -- lldb initialization file for SwiftFactals C180306PAK
#
# https://soffes.blog/debugging-json-data-in-lldb
# FlockOfSwift: command regex json 's/(.+)/expr let input = %1; print(String(data: try! JSONSerialization.data(withJSONObject: (input is String ? try! JSONSerialization.jsonObject(with: (input as! String).data(using: .utf8)!, options: []) : (input is Data ? (try! JSONSerialization.jsonObject(with: input as! Data, options: [])) : input as! Any)), options: [.prettyPrinted]), encoding: .utf8)!)/'
#
# 20210912 LLDBInitFile in SRCROOT
#	Edit Schemata: LLDBInitFile empty!
# 20201226 Installation on allenM1:
#	command source ~/Documents/SwiftFactals/.lldbinit
#	lldb reads ~/.lldbinit on startup. ln -s ~/Documents/SwiftFactals/.lldbinit ~/.
# 20221024 allenM1
#	editScheme | [Run Debug] | LLDB Init File: $(SRCROOT)/LLDBInitFile
#	command source ~/Documents/SwiftFactals/.lldbinit
#	lldb reads ~/.lldbinit on startup. ln -s ~/Documents/SwiftFactals/.lldbinit ~/.
#
# http://lldb.llvm.org/tutorial.html
# http://stackoverflow.com/questions/10198975/how-can-i-create-a-lldb-alias-that-evaluates-its-argument-using-expression
# https://github.com/alloy/LLDB-Is-It-Not     180303 autoload

# https://opensource.apple.com/source/lldb/lldb-310.2.36/www/troubleshooting.html
settings set target.inline-breakpoint-strategy always

command alias lldbIsLoaded p "ya, ya, ya,  LLDBInitFile is loaded"

#### PrettyPrint target <t> in following ways:
#  1. <t> is " "+<variableName>
#  2. <t> is s:self, m:model, v:vew, n:SCNNode or
##Shortcut: - PpMode:
# pc<t>    .fwClassName	// classname				e.g: "Port"
# pn<t>    .name		// name (in parent)			e.g: "P"
# pnuc<t>  .nameUidClass// name:Uid:Class ??		e.g:
# pf<t>    .fullName	// fullname					e.g: /net/foo/a.P
# po<t>    	 <n.a.>     // print object
# # ---------- pi**     //
# pi<t>    .uidClass	// uid:class				e.g. 456:Port
# piU<t>   .uid			// uid						e.g: "456")
# piCu<t>  .classUid	// class:uid				e.g: "Port<456>"
# piUc<t>  .uidClass  	// uid:class				e.g: "456:Port"		<-- DUPLICATE
# piFuc<t> .fullNameUidClass						e.g: "ROOT/max/P/456:Port"
# # ---- p*             //
# pp<t>    .phrase		// shorter than short		e.g: [z:1]
# ps<t>    .short		// shortest, canonic form	e.g: [0.0, 0.0, 0.0]
# pl<t>    .line		// self 1-line, used in tree
# pt<t>    .tree		// multi-line (+children), 	(e.g: multi-line)
# #  ---- p*L           //
# ppL<t>   .phrase 		// + Links
# plL<t>   .line 		// + Links
# ptL<t>   .tree 		// + Links
# #  ---- p*P           //
# ppP<t>   .phrase 		// + Parameters
# plP<t>   .line 		// + Parameters
# ptP<t>   .tree 		// + Parameters
# # ---- p*LP           //
# ppLP<t>  .phrase 		// + Links + Parameters
# plLP<t>  .line 		// + Links + Parameters
# ptLP<t>  .tree 		// + Links + Parameters

## :H:
######## ---- First  Character: -------- [Pp] -------------- {p: print without property hash; P is with)
######## ---- Middle Character(s): ----- [pc,pn,pnu,pf,pi,piCu,piU,piFuc,pp,ps,pl,pt] -- Tree with Ports and Links
#command regex pc    's/^(.+)$/e print(%1.pp(.fwClassName, DOClogger.params4aux + ["ppDagOrder":true]))/'

##---------------- third arg from
command regex pc     's/^(.+)$/e lldbPrint(%1, mode:.fwClassName,DOClogger.params4aux + ["ppDagOrder":true])/'
command regex pn     's/^(.+)$/e lldbPrint(%1, mode:.name		)/'
command regex pnuc   's/^(.+)$/e lldbPrint(%1, mode:.nameUidClass)/'
command regex pf     's/^(.+)$/e lldbPrint(%1, mode:.fullName	)/'
#command regex po     's/^(.+)$/po %1/'  # don't overload
# ---- pi*
command regex pi     's/^(.+)$/e lldbPrint(%1, mode:.uidClass	)/'
command regex piU    's/^(.+)$/e lldbPrint(%1, mode:.uid		)/'
command regex piCu   's/^(.+)$/e lldbPrint(%1, mode:.classUid	)/'
command regex piUc   's/^(.+)$/e lldbPrint(%1, mode:.uidClass	)/'
command regex piFuc  's/^(.+)$/e lldbPrint(%1, mode:.fullNameUidClass)/'
# ---- p*
command regex pp     's/^(.+)$/e lldbPrint(%1, mode:.phrase		)/'
command regex ps     's/^(.+)$/e lldbPrint(%1, mode:.short		)/'
command regex pl     's/^(.+)$/e lldbPrint(%1, mode:.line		)/'
command regex pt     's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppDagOrder":true])/'
# ---- p*L
command regex ppL    's/^(.+)$/e lldbPrint(%1, mode:.phrase,	["ppLinks":true])/'
command regex plL    's/^(.+)$/e lldbPrint(%1, mode:.line,		["ppLinks":true])/'
command regex ptL    's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppLinks":true, "ppDagOrder":true])/'
# ---- p*P
command regex ppP    's/^(.+)$/e lldbPrint(%1, mode:.phrase,	["ppParameters":true])/'
command regex plP    's/^(.+)$/e lldbPrint(%1, mode:.line,		["ppParameters":true])/'
command regex ptP    's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppParameters":true], "ppDagOrder":true)/'
# ---- p*LP
command regex ppLP   's/^(.+)$/e lldbPrint(%1, mode:.phrase,	["ppLinks":true, "ppParameters":true])/'
command regex plLP   's/^(.+)$/e lldbPrint(%1, mode:.line,		["ppLinks":true, "ppParameters":true])/'
command regex ptLP   's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppLinks":true, "ppParameters":true], "ppDagOrder":true])/'


##---------------- 's' is for sel/f
command alias pcs       pc  self
command alias pns       pn  self
command alias pnucs     pnuc self
command alias pfs       pf  self
command alias pos       po  self
# ---- pi*s
command alias pis       pi  self
command alias piUs      piU self
command alias piCus     piCu self
command alias piUcs     piUc self
command alias piFucs    piFuc self
# ---- p*s
command alias pps       pp self
command alias pss       ps self
command alias pls       pl self
command alias pts       pt self
# ---- p*Ls
command alias ppLs      ppL self
command alias plLs      plL self
command alias ptLs      ptL self
# ---- p*Ps
command alias ppPs      ppP self
command alias plPs      plP self
command alias ptPs      ptP self
# ---- p*LPs
command alias ppLPs     ppLP self
command alias plLPs     plLP self
command alias ptLPs     ptLP self


##---------------- 'm' is for whole model
command alias pcm       pc    rootPartL
command alias pnm       pn    rootPartL
command alias pnucm     pnuc  rootPartL
command alias pfm       pf    rootPartL
command alias pom       po   rootPartL
# ---- pi*m
command alias pim       pi    rootPartL
command alias piUm		piU   rootPartL
command alias piCum		piCu  rootPartL
command alias piUcm		piUc  rootPartL
command alias piFucm	piFuc rootPartL
# ---- p*m
command alias ppm       pp    rootPartL
command alias psm       ps    rootPartL
command alias plm       pl    rootPartL
command alias ptm       pt    rootPartL
# ---- p*Lm
command alias ppLm      ppL   rootPartL
command alias plLm      plL   rootPartL
command alias ptLm      ptL   rootPartL
# ---- p*Pm
command alias ppPm      ppP   rootPartL
command alias plPm      plP   rootPartL
command alias ptPm      ptP   rootPartL
# ---- p*LPm
command alias ppLPm     ppLP  rootPartL
command alias plLPm     plLP  rootPartL
command alias ptLPm     ptLP  rootPartL


##---------------- 'v' is for whole vew ----------------------
command alias pcv      pc    rootVew0
command alias pcv0      pc    rootVew0
command alias pcv1      pc    rootVew1
command alias pcv2      pc    rootVew2
command alias pnv      pn    rootVew0
command alias pnv0      pn    rootVew0
command alias pnv1      pn    rootVew1
command alias pnv2      pn    rootVew2
command alias pnucv    pnuc  rootVew0
command alias pnucv0    pnuc  rootVew0
command alias pnucv1    pnuc  rootVew1
command alias pnucv2    pnuc  rootVew2
command alias pfv      pf    rootVew0
command alias pfv0      pf    rootVew0
command alias pfv1      pf    rootVew1
command alias pfv2      pf    rootVew2
command alias pov      po    rootVew0
command alias pov0      po    rootVew0
command alias pov1      po    rootVew1
command alias pov2      po    rootVew2
# ---- pi*v
command alias piv      pi    rootVew0
command alias piv0      pi    rootVew0
command alias piv1      pi    rootVew1
command alias piv2      pi    rootVew2
command alias piUv     piU   rootVew0
command alias piUv0     piU   rootVew0
command alias piUv1     piU   rootVew1
command alias piUv2     piU   rootVew2
command alias piCuv    piCu  rootVew0
command alias piCuv0    piCu  rootVew0
command alias piCuv1    piCu  rootVew1
command alias piCuv2    piCu  rootVew2
command alias piUcv    piUc  rootVew0
command alias piUcv0    piUc  rootVew0
command alias piUcv1    piUc  rootVew1
command alias piUcv2    piUc  rootVew2
command alias piFucv   piFuc rootVew0
command alias piFucv0   piFuc rootVew0
command alias piFucv1   piFuc rootVew1
command alias piFucv2   piFuc rootVew2

# ---- p*v
command alias ppv      pp    rootVew0
command alias ppv0      pp    rootVew0
command alias ppv1      pp    rootVew1
command alias ppv2      pp    rootVew2
command alias psv      ps    rootVew0
command alias psv0      ps    rootVew0
command alias psv1      ps    rootVew1
command alias psv2      ps    rootVew2
command alias plv      pl    rootVew0
command alias plv0      pl    rootVew0
command alias plv1      pl    rootVew1
command alias plv2      pl    rootVew2
command alias ptv      pt    rootVew0
command alias ptv0      pt    rootVew0
command alias ptv1      pt    rootVew1
command alias ptv2      pt    rootVew2
# ---- p*Lv
command alias ppLv     ppL   rootVew0
command alias ppLv0     ppL   rootVew0
command alias ppLv1     ppL   rootVew1
command alias ppLv2     ppL   rootVew2
command alias plLv     plL   rootVew0
command alias plLv0     plL   rootVew0
command alias plLv1     plL   rootVew1
command alias plLv2     plL   rootVew2
command alias ptLv     ptL   rootVew0
command alias ptLv0     ptL   rootVew0
command alias ptLv1     ptL   rootVew1
command alias ptLv2     ptL   rootVew2
# ---- p*Pv
command alias ppPv     ppP   rootVew0
command alias ppPv0     ppP   rootVew0
command alias ppPv1     ppP   rootVew1
command alias ppPv2     ppP   rootVew2
command alias plPv     plP   rootVew0
command alias plPv0     plP   rootVew0
command alias plPv1     plP   rootVew1
command alias plPv2     plP   rootVew2
command alias ptPv     ptP   rootVew0
command alias ptPv0     ptP   rootVew0
command alias ptPv1     ptP   rootVew1
command alias ptPv2     ptP   rootVew2
# ---- p*LPv
command alias ppLPv    ppLP  rootVew0
command alias ppLP0     ppLP  rootVew0
command alias ppLP1     ppLP  rootVew1
command alias ppLP2     ppLP  rootVew2
command alias plLPv    plLP  rootVew0
command alias plLP0     plLP  rootVew0
command alias plLP1     plLP  rootVew1
command alias plLP2     plLP  rootVew2
command alias ptLPv    ptLP  rootVew0
command alias ptLP0     ptLP  rootVew0
command alias ptLP1     ptLP  rootVew1
command alias ptLP2     ptLP  rootVew2


##---------------- 'n' is for all SCNNodes in Trunk ----------------------
command alias pcn      pc    rootScn0
command alias pcn0      pc    rootScn0
command alias pcn1      pc    rootScn1
command alias pcn2      pc    rootScn2
command alias pnn      pn    rootScn0
command alias pnn0      pn    rootScn0
command alias pnn1      pn    rootScn1
command alias pnn2      pn    rootScn2
command alias pnucn    pnuc  rootScn0
command alias pnucn0    pnuc  rootScn0
command alias pnucn1    pnuc  rootScn1
command alias pnucn2    pnuc  rootScn2
command alias pfn      pf    rootScn0
command alias pfn0      pf    rootScn0
command alias pfn1      pf    rootScn1
command alias pfn2      pf    rootScn2
command alias pon      po    rootScn0
command alias pon0      po    rootScn0
command alias pon1      po    rootScn1
command alias pon2      po    rootScn2
# ---- pi*n
command alias pin      pi    rootScn0
command alias pin0      pi    rootScn0
command alias pin1      pi    rootScn1
command alias pin2      pi    rootScn2
command alias piUn     piU   rootScn0
command alias piUn0     piU   rootScn0
command alias piUn1     piU   rootScn1
command alias piUn2     piU   rootScn2
command alias piCun    piCu  rootScn0
command alias piCun0    piCu  rootScn0
command alias piCun1    piCu  rootScn1
command alias piCun2    piCu  rootScn2
command alias piUcn    piUc  rootScn0
command alias piUcn0    piUc  rootScn0
command alias piUcn1    piUc  rootScn1
command alias piUcn2    piUc  rootScn2
command alias piFucn   piFuc rootScn0
command alias piFucn0   piFuc rootScn0
command alias piFucn1   piFuc rootScn1
command alias piFucn2   piFuc rootScn2
# ---- p*n
command alias ppn      pp    rootScn0
command alias ppn0      pp    rootScn0
command alias ppn1      pp    rootScn1
command alias ppn2      pp    rootScn2
command alias psn      ps    rootScn0
command alias psn0      ps    rootScn0
command alias psn1      ps    rootScn1
command alias psn2      ps    rootScn2
command alias pln      pl    rootScn0
command alias pln0      pl    rootScn0
command alias pln1      pl    rootScn1
command alias pln2      pl    rootScn2
command alias ptn      pt    rootScn0
command alias ptn0      pt    rootScn0
command alias ptn1      pt    rootScn1
command alias ptn2      pt    rootScn2
# ---- p*Ln
command alias ppLn     ppL   rootScn0
command alias ppLn0     ppL   rootScn0
command alias ppLn1     ppL   rootScn1
command alias ppLn2     ppL   rootScn2
command alias plLn     plL   rootScn0
command alias plLn0     plL   rootScn0
command alias plLn1     plL   rootScn1
command alias plLn2     plL   rootScn2
command alias ptLn     ptL   rootScn0
command alias ptLn0     ptL   rootScn0
command alias ptLn1     ptL   rootScn1
command alias ptLn2     ptL   rootScn2
# ---- p*Pn
command alias ppPn     ppP   rootScn0
command alias ppPn0     ppP   rootScn0
command alias ppPn1     ppP   rootScn1
command alias ppPn2     ppP   rootScn2
command alias plPn     plP   rootScn0
command alias plPn0     plP   rootScn0
command alias plPn1     plP   rootScn1
command alias plPn2     plP   rootScn2
command alias ptPn     ptP   rootScn0
command alias ptPn0     ptP   rootScn0
command alias ptPn1     ptP   rootScn1
command alias ptPn2     ptP   rootScn2
# ---- p*LPn
command alias ppLPn    ppLP  rootScn0
command alias ppLPn0    ppLP  rootScn0
command alias ppLPn1    ppLP  rootScn1
command alias ppLPn2    ppLP  rootScn2
command alias plLPn    plLP  rootScn0
command alias plLPn0    plLP  rootScn0
command alias plLPn1    plLP  rootScn1
command alias plLPn2    plLP  rootScn2
command alias ptLPn    ptLP  rootScn0
command alias ptLPn0    ptLP  rootScn0
command alias ptLPn1    ptLP  rootScn1
command alias ptLPn2    ptLP  rootScn2



# In the wind:
     # replace 'selfBoundingBox Factals.FwBBox 0x000060000007b4c0' with '(FwBBox) [3>5, ...
     # p1: 'String' has no 1-line summary
     ### HELP p1 selfStr
     #command regex pi     's/^(.+)$/expression -- print(%1.fullname)/'  ## ??? pi ; fullname;
     # CGPoint support

# print [.line, .tree,...] with
#     parameters, bbox [scn, fw]
#              e.g: p print( pp(.tree, ["ppPorts":true]))o

# sometimes the option does the wrong thing, like ["t1":String, "t2":String] instead of [t1, t2]

# Proposals:
# pt(parameters) [...]         "P"        ? ptPs, ptPm, ptP<>, ...
# pt(links)      [...]         "L"    ? ptLs, ptLm, ptL<>, ...

# Easy specification of additional print parameters e.g. "ppParam":true
#
##-----------------    PRINT Objective C
#command regex piXX    's/^(.+)$/expression -- pInfo(%1)/'          H E L P

##-----------------    retain counts (not precise, but often interesting and helpful)
command regex prc      's/^(.+)$/expression -- (int)[%1 retainCount]/'
#
##-----------------
#command alias ogl     expression -- ogl()

##-----------------    Print RAW
command alias  pr      frame v -R

########## ########## ########## ########## ########## ########## ########## 
# -- SUMMARIES:
type summary add --summary-string  "Part.name=${var.name}"  Part
type summary add --summary-string  "Vew.name=${var.name} part:${var.part.name}"  Vew
########## ########## ########## ########## ########## ########## ########## 
#
command     alias fwHelp 		expression fwHelp("?")
command     alias pFwcConfig	expression printFwcConfig()
command     alias pFwcState		expression printFwcState()

############################### FILE A BUG REPORT: Would like, but BROKEN. wanted badly:
#command alias lldbinit		command source ~/.lldbinit					# DOESN'T WORK
#command alias lldbinit		command source $(PROJECT_DIR)/LLDBInitFile	# DOESN'T WORK
command alias lldbinit		command source $(SRCROOT)/LLDBInitFile		# DOESN'T WORK
#command alias lldbinit		lldbinitFactals								# DOESN'T WORK

## allenM1:
#command alias lldbinit			 	  command source ~/DocLocal/HaveNWant/Factals/LLDBInitFile
command alias lldbinitFactals	 	  command source ~/DocLocal/HaveNWant/Factals/LLDBInitFile
command alias lldbinitFooDocTry3	  command source ~/DocLocal/HaveNWant/FooDocTry3Clone/LLDBInitFile
command alias lldbinitSwiftFactals	  command source ~/DocLocal/HaveNWant/SwiftFactals/LLDBInitFile
command alias lldbinitFactalWorkbench command source ~/DocLocal/HaveNWant/FactalWorkbench/LLDBInitFile

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # LOADING .lldbinit for Factals COMPLETE # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# reload with  lldbinit  = '  command source ~/DocLocal/HaveNWant/Factals/LLDBInitFile '
#    N.B: Edit Schema; in tabs [run | debug]; in field 'lldb init file' enter:$(SRCROOT)/LLDBInitFile
## Common Commands: ptm, plv, ppn, pfs, ptPm, plLm
# :H: Character 1:   p- -: Pretty Print
# :H: Character 2:   -p -:.phrase; -l -:.line,          -t--:.tree,
# :H: Character 2:   -c -:classF;  -n -:name,           -f--:fullName, -i--:.id,aaaaaaa
# :H: Character 2.5: --L-:ppLinks; --P-:ppParameters
# :H: Character 3:   -- s:self;    ---m:root_Experiment ---v:root Vew  --n-:root SCNNode
## use rootpart("<name>") and rootvew("<name>") to find a part in tree
## pFwcState, pFwcConfig fwHelp("C")

