# .lldbinit -- lldb initialization file for SwiftFactals C180306PAK
#
# https://soffes.blog/debugging-json-data-in-lldb
# FlockOfSwift: command regex json 's/(.+)/expr let input = %1; print(String(data: try! JSONSerialization.data(withJSONObject: (input is String ? try! JSONSerialization.jsonObject(with: (input as! String).data(using: .utf8)!, options: []) : (input is Data ? (try! JSONSerialization.jsonObject(with: input as! Data, options: [])) : input as! Any)), options: [.prettyPrinted]), encoding: .utf8)!)/'
#
# 20210912 LLDBInitFile in SRCROOT
#	Edit Schemata: LLDBInitFile empty!
# 20201226 Installation on allenM1:
#	command source ~/Documents/SwiftFactals/.lldbinit
#	lldb reads ~/.lldbinit on startup. ln -s ~/Documents/SwiftFactals/.lldbinit ~/.
command alias idFoo e print("345678")
command alias ieFoo print '$(SRCROOT) '$(PROJECT_DIR)
# random comment with $(SRCROOT) $(PROJECT_DIR)
command alias QM    e Controller.current!.printDebuggerHints()

#### PrettyPrint target <t> in following ways:
# 		where <t> is s:self, m:model, v:vew, n:SCNNode or " "+<variableName>
# pt<target> -- tree				self and children, multi-line
# pl<target> -- line				self 1-line
# pp<target> -- phrase				self short
# pi<target> -- uidClass			e.g. 456:Port
#  piN<t>    -- idN					e.g. "foo"			\ which?
#  nameUidClass<t> - name/Uid:Class e.g: "P/456:Port"	/
#  piUc<t>   -- Uid:Class			e.g: "456:Port"		<-- pi
#  piCu<t>   -- Class<uid>			e.g: "Port<456>"
#  piU<t>    -- uid					e.g: "456")
#  piFuc<t>  -- fullName/Uid:Class	e.g: "ROOT/max/P/456:Port"
# ps<t>      -- ???
# pf<target> -- full name			e.g. /net/foo/a.P
# pn<target> -- name				e.g. "P"
# pc<target> -- fwClassName			e.g. Port

# http://lldb.llvm.org/tutorial.html
# http://stackoverflow.com/questions/10198975/how-can-i-create-a-lldb-alias-that-evaluates-its-argument-using-expression
# https://github.com/alloy/LLDB-Is-It-Not     180303 autoload

settings set target.inline-breakpoint-strategy always

## :H:
######## ---- First  Character: -------- [Pp] -------------- {p: print without property hash; P is with)
######## ---- Middle Character(s): ----- [pc,pn,pnu,pf,pi,piUc,piCu,piU,piFuc,pp,ps,pl,pt] -- Tree with Ports and Links
#command regex pc     's/^(.+)$/e lldbPrint(ob:%1, mode:.fwClassName)/'
command regex pc     's/^(.+)$/e Swift.print(%1.pp(.fwClassName, DOClog.params4aux + ["ppDagOrder":true]))/'

command regex pn     's/^(.+)$/e lldbPrint(ob:%1, mode:.name			)/'
command regex pnu    's/^(.+)$/e lldbPrint(ob:%1, mode:.nameUidClass	)/'
command regex pf     's/^(.+)$/e lldbPrint(ob:%1, mode:.fullName		)/'
command regex pi     's/^(.+)$/e lldbPrint(ob:%1, mode:.uidClass		)/'
command regex piUc   's/^(.+)$/e lldbPrint(ob:%1, mode:.uidClass		)/'
command regex piCu   's/^(.+)$/e lldbPrint(ob:%1, mode:.classUid		)/'
command regex piU    's/^(.+)$/e lldbPrint(ob:%1, mode:.uid				)/'
command regex piFuc  's/^(.+)$/e lldbPrint(ob:%1, mode:.fullNameUidClass)/'
command regex pp     's/^(.+)$/e lldbPrint(ob:%1, mode:.phrase			)/'
command regex ps     's/^(.+)$/e lldbPrint(ob:%1, mode:.short			)/'
command regex pl     's/^(.+)$/e lldbPrint(ob:%1, mode:.line			)/'
command regex pt     's/^(.+)$/e lldbPrint(ob:%1, mode:.tree,			["ppDagOrder":true])/'
#                                                                               #
command regex ppL    's/^(.+)$/e lldbPrint(ob:%1, mode:.phrase,			["ppLinks":true])/'
command regex plL    's/^(.+)$/e lldbPrint(ob:%1, mode:.line,			["ppLinks":true])/'
command regex ptL    's/^(.+)$/e lldbPrint(ob:%1, mode:.tree,			["ppDagOrder":true, "ppLinks":true])/'
#                                                                               #
command regex ppP    's/^(.+)$/e lldbPrint(ob:%1, mode:.phrase,			["ppParameters":true])/'
command regex plP    's/^(.+)$/e lldbPrint(ob:%1, mode:.line,			["ppParameters":true])/'
command regex ptP    's/^(.+)$/e lldbPrint(ob:%1, mode:.tree,			["ppDagOrder":true, "ppParameters":true])/'
#                                                                               #
command regex ppLP   's/^(.+)$/e lldbPrint(ob:%1, mode:.phrase,			["ppLinks":true, "ppParameters":true])/'
command regex plLP   's/^(.+)$/e lldbPrint(ob:%1, mode:.line,			["ppLinks":true, "ppParameters":true])/'
command regex ptLP   's/^(.+)$/e lldbPrint(ob:%1, mode:.tree,			["ppDagOrder":true, "ppLinks":true, "ppParameters":true]])/'

##---------------- 's' is for sel/f
command alias pcs       pc self
command alias pns       pn self
command alias pfs       pf self
command alias pis       pi self
#command alias piNs      piN self	#broken
command alias piUcs     piUc self
command alias piCus     piCu self
command alias piUs      piU self
command alias piFucs    piFuc self

command alias pps       pp self
command alias pls       pl self
command alias pts       pt self

command alias ppLs      ppL self
command alias plLs      plL self
command alias ptLs      ptL self

command alias ppPs      ppP self
command alias plPs      plP self
command alias ptPs      ptP self

command alias ppLPs     ppLP self
command alias plLPs     plLP self
command alias ptLPs     ptLP self
#command alias pos       po self		# "unable to create the requested alias"

##---------------- 'm' is for whole model
command alias pcm       pc    rootPartL
command alias pnm       pn    rootPartL
command alias pfm       pf    rootPartL
#command alias pim      pi    rootPartL
command alias pim       pi    rootPartL
#command alias piNm		piN   rootPartL
command alias piUcm		piUc  rootPartL
command alias piCum		piCu  rootPartL
command alias piUm		piU   rootPartL
command alias piFucm	piFuc rootPartL

command alias ppm       pp    rootPartL
command alias plm       pl    rootPartL
command alias ptm       pt    rootPartL

command alias ppLm      ppL   rootPartL
command alias plLm      plL   rootPartL
command alias ptLm      ptL   rootPartL
command alias ppPm      ppP   rootPartL
command alias plPm      plP   rootPartL
command alias ptPm      ptP   rootPartL

command alias ppLPm     ppLP  rootPartL
command alias plLPm     plLP  rootPartL
command alias ptLPm     ptLP  rootPartL
#command alias pom       po   rootPartL

##---------------- 'v' is for whole vew
command alias pcv       pc    rootVewL
command alias pnv       pn    rootVewL
command alias pfv       pf    rootVewL
#command alias piv      pi    rootVewL
command alias piv       pi    rootVewL
#command alias piNv		piN   rootVewL
command alias piUcv		piUc  rootVewL
command alias piCuv		piCu  rootVewL
command alias piUv		piU   rootVewL
command alias piFucv	piFuc rootVewL

command alias ppv       pp    rootVewL
command alias plv       pl    rootVewL
command alias ptv       pt    rootVewL

#command alias ptv_     e 	Swift.print("abc\n".pp(.tree     ), terminator:"")
#----BAD
#command alias ptv_     e 	Swift.print("abc\n"?.pp(.tree     ) ?? "nil\n", terminator:"")
command alias ptv_      e 	Swift.print(rootvew()?.pp(.tree     ) ?? "nil\n", terminator:"")

command alias ppLv      ppL   rootVewL
command alias plLv      plL   rootVewL
command alias ptLv      ptL   rootVewL
command alias ppPv      ppP   rootVewL
command alias plPv      plP   rootVewL
command alias ptPv      ptP   rootVewL

command alias ppLPv     ppLP  rootVewL
command alias plLPv     plLP  rootVewL
command alias ptLPv     ptLP  rootVewL
#command alias pov      po    rootVewL

##---------------- 'n' is for all SCNNodes in Trunk
command alias pcn       pc    rootScnL
command alias pnn       pn    rootScnL
command alias pfn       pf    rootScnL
#command alias pin      pi    rootScnL
command alias pin       pi    rootScnL
#command alias piNn      piN  rootScnL
command alias piUcn     piUc  rootScnL
command alias piCun     piCu  rootScnL
command alias piUn      piU   rootScnL
command alias piFucn    piFuc rootScnL

command alias ppn       pp    rootScnL
command alias pln       pl    rootScnL
command alias ptn       pt    rootScnL

command alias ppLn      ppL   rootScnL
command alias plLn      plL   rootScnL
command alias ptLn      ptL   rootScnL
command alias ppPn      ppP   rootScnL
command alias plPn      plP   rootScnL
command alias ptPn      ptP   rootScnL

command alias ppLPn     ppLP  rootScnL
command alias plLPn     plLP  rootScnL
command alias ptLPn     ptLP  rootScnL
#command alias pon      po    rootScnL

# In the wind:
     # replace 'selfBoundingBox SwiftFactals.FwBBox 0x000060000007b4c0' with '(FwBBox) [3>5, ...
     # p1: 'String' has no 1-line summary
     ### HELP p1 selfStr
     #command regex pi     's/^(.+)$/expression -- Swift.print(%1.fullname)/'  ## ??? pi ; fullname;
     # CGPoint support

# print [.line, .tree,...] with
#     parameters, bbox [scn, fw]
#              e.g: p Swift.print( pp(.tree, ["ppPorts":true]))o

# sometimes the option does the wrong thing, like ["t1":String, "t2":String] instead of [t1, t2]

# Proposals:
# pt(parameters) [...]         "P"        ? ptPs, ptPm, ptP<>, ...
# pt(links)      [...]         "L"    ? ptLs, ptLm, ptL<>, ...

# Easy specification of additional print parameters e.g. "ppParam":true
#
##-----------------    PRINT Objective C
#command regex pi      's/^(.+)$/expression -- pInfo(%1)/'          H E L P

##-----------------    retain counts (not precise, but often interesting and helpful)
command regex prc      's/^(.+)$/expression -- (int)[%1 retainCount]/'
#
##-----------------
#command alias ogl     expression -- ogl()

##-----------------    Print RAW
command alias  pr      frame v -R

########## ########## ########## ########## ########## ########## ########## 
# -- SUMMARIES:
type summary add --summary-string  "Part.name=${var.name}"  Part
type summary add --summary-string  "Vew.name=${var.name} part:${var.part.name}"  Vew
########## ########## ########## ########## ########## ########## ########## 
#
command     alias fwHelp 		expression fwHelp("?")
command     alias pFwcConfig	expression printFwcConfig()
### command alias pFwcConfig	### expression fwHelp("C")
command  alias pFwcState			expression printFwcState()
### command alias pFwcState		### expression fwHelp("c")
###command regex pFwState2			's/^(.+)$/e Swift.print(%1.ppFwState())/'
###command alias ppControllerState expression -- Swift.print(sendApp(key:"C"))

##############################
# FILE A BUG REPORT: Would like, but Broken:
# BROKEN, but wanted badly:
command alias lldbinitX				  command source $(PROJECT_DIR)/LLDBInitFile

### allenM1:
command alias lldbinitFooDocTry3	  command source ~/DocLocal/HaveNWant/FooDocTry3/LLDBInitFile
command alias lldbinitSwiftFactals	  command source ~/DocLocal/HaveNWant/SwiftFactals/LLDBInitFile
command alias lldbinitFactalWorkbench command source ~/DocLocal/HaveNWant/FactalWorkbench/LLDBInitFile
command alias lldbinit				  lldbinitFooDocTry3
##############################


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # LOADING .lldbinit for FooDocTry3 COMPLETE # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# reload with  lldbinit  = '  command source ~/DocLocal/HaveNWant/FooDocTry3/LLDBInitFile '
#    N.B: Edit Schema; in tabs [run | debug]; in field 'lldb init file' enter:$(SRCROOT)/LLDBInitFile
## Common Commands: ptm, plv, ppn, pfs, ptPm, plLm
# :H: Character 1:   p- -: Pretty Print
# :H: Character 2:   -p -:.phrase; -l -:.line,          -t--:.tree,
# :H: Character 2:   -c -:classF;  -n -:name,           -f--:fullName, -i--:.id,aaaaaaa
# :H: Character 2.5: --L-:ppLinks; --P-:ppParameters
# :H: Character 3:   -- s:self;    ---m:root_Experiment ---v:root Vew  --n-:root SCNNode
## use rootpart("<name>") and rootvew("<name>") to find a part in tree
## pFwcState, pFwcConfig fwHelp("C")

