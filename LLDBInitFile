# .lldbinit -- lldb initialization file for SwiftFactals C180306PAK
#
# https://soffes.blog/debugging-json-data-in-lldb
# FlockOfSwift: command regex json 's/(.+)/expr let input = %1; print(String(data: try! JSONSerialization.data(withJSONObject: (input is String ? try! JSONSerialization.jsonObject(with: (input as! String).data(using: .utf8)!, options: []) : (input is Data ? (try! JSONSerialization.jsonObject(with: input as! Data, options: [])) : input as! Any)), options: [.prettyPrinted]), encoding: .utf8)!)/'
#
# 20210912 LLDBInitFile in SRCROOT
#	Edit Schemata: LLDBInitFile empty!
# 20201226 Installation on allenM1:
#	command source ~/Documents/SwiftFactals/.lldbinit
#	lldb reads ~/.lldbinit on startup. ln -s ~/Documents/SwiftFactals/.lldbinit ~/.
# 20221024 allenM1
#	editScheme | [Run Debug] | LLDB Init File: $(SRCROOT)/LLDBInitFile
#	command source ~/Documents/SwiftFactals/.lldbinit
#	lldb reads ~/.lldbinit on startup. ln -s ~/Documents/SwiftFactals/.lldbinit ~/.
#
# http://lldb.llvm.org/tutorial.html
# http://stackoverflow.com/questions/10198975/how-can-i-create-a-lldb-alias-that-evaluates-its-argument-using-expression
# https://github.com/alloy/LLDB-Is-It-Not     180303 autoload

# https://opensource.apple.com/source/lldb/lldb-310.2.36/www/troubleshooting.html
settings set target.inline-breakpoint-strategy always

command alias lldbIsLoaded p "ya, ya, ya,  LLDBInitFile is loaded"

#### PrettyPrint target <t> in following ways:
#  1. <t> is " "+<variableName>
#  2. <t> is s:self, m:model, v:vew, n:SCNNode or
##Shortcut: - PpMode:
# pc<t>    .fwClassName	// classname				e.g: "Port"
# pn<t>    .name		// name (in parent)			e.g: "P"
# pnuc<t>  .nameUidClass// name:Uid:Class ??		e.g:
# pf<t>    .fullName	// fullname					e.g: /net/foo/a.P
# po<t>    	 <n.a.>     // print object
# # ---------- pi**     //
# pi<t>    .uidClass	// uid:class				e.g. 456:Port
# piU<t>   .uid			// uid						e.g: "456")
# piCu<t>  .classUid	// class:uid				e.g: "Port<456>"
# piUc<t>  .uidClass  	// uid:class				e.g: "456:Port"		<-- DUPLICATE
# piFuc<t> .fullNameUidClass						e.g: "ROOT/max/P/456:Port"
# # ---- p*             //
# pp<t>    .phrase		// shorter than short		e.g: [z:1]
# ps<t>    .short		// shortest, canonic form	e.g: [0.0, 0.0, 0.0]
# pl<t>    .line		// self 1-line, used in tree
# pt<t>    .tree		// multi-line (+children), 	(e.g: multi-line)
# #  ---- p*L           //
# ppL<t>   .phrase 		// + Links
# plL<t>   .line 		// + Links
# ptL<t>   .tree 		// + Links
# #  ---- p*P           //
# ppP<t>   .phrase 		// + Parameters
# plP<t>   .line 		// + Parameters
# ptP<t>   .tree 		// + Parameters
# # ---- p*LP           //
# ppLP<t>  .phrase 		// + Links + Parameters
# plLP<t>  .line 		// + Links + Parameters
# ptLP<t>  .tree 		// + Links + Parameters

## :H:
######## ---- First  Character: -------- [Pp] -------------- {p: print without property hash; P is with)
######## ---- Middle Character(s): ----- [pc,pn,pnu,pf,pi,piCu,piU,piFuc,pp,ps,pl,pt] -- Tree with Ports and Links
#command regex pc    's/^(.+)$/e print(%1.pp(.fwClassName, DOClog.params4aux + ["ppDagOrder":true]))/'

##---------------- third arg from
command regex pc     's/^(.+)$/e lldbPrint(%1, mode:.fwClassName,DOClog.params4aux + ["ppDagOrder":true])/'
command regex pn     's/^(.+)$/e lldbPrint(%1, mode:.name		)/'
command regex pnuc   's/^(.+)$/e lldbPrint(%1, mode:.nameUidClass)/'
command regex pf     's/^(.+)$/e lldbPrint(%1, mode:.fullName	)/'
#command regex po     's/^(.+)$/po %1/'  # don't overload
# ---- pi*
command regex pi     's/^(.+)$/e lldbPrint(%1, mode:.uidClass	)/'
command regex piU    's/^(.+)$/e lldbPrint(%1, mode:.uid		)/'
command regex piCu   's/^(.+)$/e lldbPrint(%1, mode:.classUid	)/'
command regex piUc   's/^(.+)$/e lldbPrint(%1, mode:.uidClass	)/'
command regex piFuc  's/^(.+)$/e lldbPrint(%1, mode:.fullNameUidClass)/'
# ---- p*
command regex pp     's/^(.+)$/e lldbPrint(%1, mode:.phrase		)/'
command regex ps     's/^(.+)$/e lldbPrint(%1, mode:.short		)/'
command regex pl     's/^(.+)$/e lldbPrint(%1, mode:.line		)/'
command regex pt     's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppDagOrder":true])/'
# ---- p*L
command regex ppL    's/^(.+)$/e lldbPrint(%1, mode:.phrase,	["ppLinks":true])/'
command regex plL    's/^(.+)$/e lldbPrint(%1, mode:.line,		["ppLinks":true])/'
command regex ptL    's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppLinks":true, "ppDagOrder":true])/'
# ---- p*P
command regex ppP    's/^(.+)$/e lldbPrint(%1, mode:.phrase,	["ppParameters":true])/'
command regex plP    's/^(.+)$/e lldbPrint(%1, mode:.line,		["ppParameters":true])/'
command regex ptP    's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppParameters":true], "ppDagOrder":true)/'
# ---- p*LP
command regex ppLP   's/^(.+)$/e lldbPrint(%1, mode:.phrase,	["ppLinks":true, "ppParameters":true])/'
command regex plLP   's/^(.+)$/e lldbPrint(%1, mode:.line,		["ppLinks":true, "ppParameters":true])/'
command regex ptLP   's/^(.+)$/e lldbPrint(%1, mode:.tree,		["ppLinks":true, "ppParameters":true], "ppDagOrder":true])/'


##---------------- 's' is for sel/f
command alias pcs       pc  self
command alias pns       pn  self
command alias pnucs     pnuc self
command alias pfs       pf  self
command alias pos       po  self
# ---- pi*s
command alias pis       pi  self
command alias piUs      piU self
command alias piCus     piCu self
command alias piUcs     piUc self
command alias piFucs    piFuc self
# ---- p*s
command alias pps       pp self
command alias pss       ps self
command alias pls       pl self
command alias pts       pt self
# ---- p*Ls
command alias ppLs      ppL self
command alias plLs      plL self
command alias ptLs      ptL self
# ---- p*Ps
command alias ppPs      ppP self
command alias plPs      plP self
command alias ptPs      ptP self
# ---- p*LPs
command alias ppLPs     ppLP self
command alias plLPs     plLP self
command alias ptLPs     ptLP self


##---------------- 'm' is for whole model
command alias pcm       pc    LLDBrootPart
command alias pnm       pn    LLDBrootPart
command alias pnucm     pnuc  LLDBrootPart
command alias pfm       pf    LLDBrootPart
command alias pom       po   LLDBrootPart
# ---- pi*m
command alias pim       pi    LLDBrootPart
command alias piUm		piU   LLDBrootPart
command alias piCum		piCu  LLDBrootPart
command alias piUcm		piUc  LLDBrootPart
command alias piFucm	piFuc LLDBrootPart
# ---- p*m
command alias ppm       pp    LLDBrootPart
command alias psm       ps    LLDBrootPart
command alias plm       pl    LLDBrootPart
command alias ptm       pt    LLDBrootPart
# ---- p*Lm
command alias ppLm      ppL   LLDBrootPart
command alias plLm      plL   LLDBrootPart
command alias ptLm      ptL   LLDBrootPart
# ---- p*Pm
command alias ppPm      ppP   LLDBrootPart
command alias plPm      plP   LLDBrootPart
command alias ptPm      ptP   LLDBrootPart
# ---- p*LPm
command alias ppLPm     ppLP  LLDBrootPart
command alias plLPm     plLP  LLDBrootPart
command alias ptLPm     ptLP  LLDBrootPart


##---------------- 'v' is for whole vew ----------------------
command alias pcv      pc    LLDBrootVew0
command alias pcv0      pc    LLDBrootVew0
command alias pcv1      pc    LLDBrootVew1
command alias pcv2      pc    LLDBrootVew2
command alias pnv      pn    LLDBrootVew0
command alias pnv0      pn    LLDBrootVew0
command alias pnv1      pn    LLDBrootVew1
command alias pnv2      pn    LLDBrootVew2
command alias pnucv    pnuc  LLDBrootVew0
command alias pnucv0    pnuc  LLDBrootVew0
command alias pnucv1    pnuc  LLDBrootVew1
command alias pnucv2    pnuc  LLDBrootVew2
command alias pfv      pf    LLDBrootVew0
command alias pfv0      pf    LLDBrootVew0
command alias pfv1      pf    LLDBrootVew1
command alias pfv2      pf    LLDBrootVew2
command alias pov      po    LLDBrootVew0
command alias pov0      po    LLDBrootVew0
command alias pov1      po    LLDBrootVew1
command alias pov2      po    LLDBrootVew2
# ---- pi*v
command alias piv      pi    LLDBrootVew0
command alias piv0      pi    LLDBrootVew0
command alias piv1      pi    LLDBrootVew1
command alias piv2      pi    LLDBrootVew2
command alias piUv     piU   LLDBrootVew0
command alias piUv0     piU   LLDBrootVew0
command alias piUv1     piU   LLDBrootVew1
command alias piUv2     piU   LLDBrootVew2
command alias piCuv    piCu  LLDBrootVew0
command alias piCuv0    piCu  LLDBrootVew0
command alias piCuv1    piCu  LLDBrootVew1
command alias piCuv2    piCu  LLDBrootVew2
command alias piUcv    piUc  LLDBrootVew0
command alias piUcv0    piUc  LLDBrootVew0
command alias piUcv1    piUc  LLDBrootVew1
command alias piUcv2    piUc  LLDBrootVew2
command alias piFucv   piFuc LLDBrootVew0
command alias piFucv0   piFuc LLDBrootVew0
command alias piFucv1   piFuc LLDBrootVew1
command alias piFucv2   piFuc LLDBrootVew2

# ---- p*v
command alias ppv      pp    LLDBrootVew0
command alias ppv0      pp    LLDBrootVew0
command alias ppv1      pp    LLDBrootVew1
command alias ppv2      pp    LLDBrootVew2
command alias psv      ps    LLDBrootVew0
command alias psv0      ps    LLDBrootVew0
command alias psv1      ps    LLDBrootVew1
command alias psv2      ps    LLDBrootVew2
command alias plv      pl    LLDBrootVew0
command alias plv0      pl    LLDBrootVew0
command alias plv1      pl    LLDBrootVew1
command alias plv2      pl    LLDBrootVew2
command alias ptv      pt    LLDBrootVew0
command alias ptv0      pt    LLDBrootVew0
command alias ptv1      pt    LLDBrootVew1
command alias ptv2      pt    LLDBrootVew2
# ---- p*Lv
command alias ppLv     ppL   LLDBrootVew0
command alias ppLv0     ppL   LLDBrootVew0
command alias ppLv1     ppL   LLDBrootVew1
command alias ppLv2     ppL   LLDBrootVew2
command alias plLv     plL   LLDBrootVew0
command alias plLv0     plL   LLDBrootVew0
command alias plLv1     plL   LLDBrootVew1
command alias plLv2     plL   LLDBrootVew2
command alias ptLv     ptL   LLDBrootVew0
command alias ptLv0     ptL   LLDBrootVew0
command alias ptLv1     ptL   LLDBrootVew1
command alias ptLv2     ptL   LLDBrootVew2
# ---- p*Pv
command alias ppPv     ppP   LLDBrootVew0
command alias ppPv0     ppP   LLDBrootVew0
command alias ppPv1     ppP   LLDBrootVew1
command alias ppPv2     ppP   LLDBrootVew2
command alias plPv     plP   LLDBrootVew0
command alias plPv0     plP   LLDBrootVew0
command alias plPv1     plP   LLDBrootVew1
command alias plPv2     plP   LLDBrootVew2
command alias ptPv     ptP   LLDBrootVew0
command alias ptPv0     ptP   LLDBrootVew0
command alias ptPv1     ptP   LLDBrootVew1
command alias ptPv2     ptP   LLDBrootVew2
# ---- p*LPv
command alias ppLPv    ppLP  LLDBrootVew0
command alias ppLP0     ppLP  LLDBrootVew0
command alias ppLP1     ppLP  LLDBrootVew1
command alias ppLP2     ppLP  LLDBrootVew2
command alias plLPv    plLP  LLDBrootVew0
command alias plLP0     plLP  LLDBrootVew0
command alias plLP1     plLP  LLDBrootVew1
command alias plLP2     plLP  LLDBrootVew2
command alias ptLPv    ptLP  LLDBrootVew0
command alias ptLP0     ptLP  LLDBrootVew0
command alias ptLP1     ptLP  LLDBrootVew1
command alias ptLP2     ptLP  LLDBrootVew2


##---------------- 'n' is for all SCNNodes ----------------------
command alias pcn      pc    LLDBrootScn0
command alias pcn0      pc    LLDBrootScn0
command alias pcn1      pc    LLDBrootScn1
command alias pcn2      pc    LLDBrootScn2
command alias pnn      pn    LLDBrootScn0
command alias pnn0      pn    LLDBrootScn0
command alias pnn1      pn    LLDBrootScn1
command alias pnn2      pn    LLDBrootScn2
command alias pnucn    pnuc  LLDBrootScn0
command alias pnucn0    pnuc  LLDBrootScn0
command alias pnucn1    pnuc  LLDBrootScn1
command alias pnucn2    pnuc  LLDBrootScn2
command alias pfn      pf    LLDBrootScn0
command alias pfn0      pf    LLDBrootScn0
command alias pfn1      pf    LLDBrootScn1
command alias pfn2      pf    LLDBrootScn2
command alias pon      po    LLDBrootScn0
command alias pon0      po    LLDBrootScn0
command alias pon1      po    LLDBrootScn1
command alias pon2      po    LLDBrootScn2
# ---- pi*n
command alias pin      pi    LLDBrootScn0
command alias pin0      pi    LLDBrootScn0
command alias pin1      pi    LLDBrootScn1
command alias pin2      pi    LLDBrootScn2
command alias piUn     piU   LLDBrootScn0
command alias piUn0     piU   LLDBrootScn0
command alias piUn1     piU   LLDBrootScn1
command alias piUn2     piU   LLDBrootScn2
command alias piCun    piCu  LLDBrootScn0
command alias piCun0    piCu  LLDBrootScn0
command alias piCun1    piCu  LLDBrootScn1
command alias piCun2    piCu  LLDBrootScn2
command alias piUcn    piUc  LLDBrootScn0
command alias piUcn0    piUc  LLDBrootScn0
command alias piUcn1    piUc  LLDBrootScn1
command alias piUcn2    piUc  LLDBrootScn2
command alias piFucn   piFuc LLDBrootScn0
command alias piFucn0   piFuc LLDBrootScn0
command alias piFucn1   piFuc LLDBrootScn1
command alias piFucn2   piFuc LLDBrootScn2
# ---- p*n
command alias ppn      pp    LLDBrootScn0
command alias ppn0      pp    LLDBrootScn0
command alias ppn1      pp    LLDBrootScn1
command alias ppn2      pp    LLDBrootScn2
command alias psn      ps    LLDBrootScn0
command alias psn0      ps    LLDBrootScn0
command alias psn1      ps    LLDBrootScn1
command alias psn2      ps    LLDBrootScn2
command alias pln      pl    LLDBrootScn0
command alias pln0      pl    LLDBrootScn0
command alias pln1      pl    LLDBrootScn1
command alias pln2      pl    LLDBrootScn2
command alias ptn      pt    LLDBrootScn0
command alias ptn0      pt    LLDBrootScn0
command alias ptn1      pt    LLDBrootScn1
command alias ptn2      pt    LLDBrootScn2
# ---- p*Ln
command alias ppLn     ppL   LLDBrootScn0
command alias ppLn0     ppL   LLDBrootScn0
command alias ppLn1     ppL   LLDBrootScn1
command alias ppLn2     ppL   LLDBrootScn2
command alias plLn     plL   LLDBrootScn0
command alias plLn0     plL   LLDBrootScn0
command alias plLn1     plL   LLDBrootScn1
command alias plLn2     plL   LLDBrootScn2
command alias ptLn     ptL   LLDBrootScn0
command alias ptLn0     ptL   LLDBrootScn0
command alias ptLn1     ptL   LLDBrootScn1
command alias ptLn2     ptL   LLDBrootScn2
# ---- p*Pn
command alias ppPn     ppP   LLDBrootScn0
command alias ppPn0     ppP   LLDBrootScn0
command alias ppPn1     ppP   LLDBrootScn1
command alias ppPn2     ppP   LLDBrootScn2
command alias plPn     plP   LLDBrootScn0
command alias plPn0     plP   LLDBrootScn0
command alias plPn1     plP   LLDBrootScn1
command alias plPn2     plP   LLDBrootScn2
command alias ptPn     ptP   LLDBrootScn0
command alias ptPn0     ptP   LLDBrootScn0
command alias ptPn1     ptP   LLDBrootScn1
command alias ptPn2     ptP   LLDBrootScn2
# ---- p*LPn
command alias ppLPn    ppLP  LLDBrootScn0
command alias ppLPn0    ppLP  LLDBrootScn0
command alias ppLPn1    ppLP  LLDBrootScn1
command alias ppLPn2    ppLP  LLDBrootScn2
command alias plLPn    plLP  LLDBrootScn0
command alias plLPn0    plLP  LLDBrootScn0
command alias plLPn1    plLP  LLDBrootScn1
command alias plLPn2    plLP  LLDBrootScn2
command alias ptLPn    ptLP  LLDBrootScn0
command alias ptLPn0    ptLP  LLDBrootScn0
command alias ptLPn1    ptLP  LLDBrootScn1
command alias ptLPn2    ptLP  LLDBrootScn2



# In the wind:
     # replace 'selfBoundingBox Factals.FwBBox 0x000060000007b4c0' with '(FwBBox) [3>5, ...
     # p1: 'String' has no 1-line summary
     ### HELP p1 selfStr
     #command regex pi     's/^(.+)$/expression -- print(%1.fullname)/'  ## ??? pi ; fullname;
     # CGPoint support

# print [.line, .tree,...] with
#     parameters, bbox [scn, fw]
#              e.g: p print( pp(.tree, ["ppPorts":true]))o

# sometimes the option does the wrong thing, like ["t1":String, "t2":String] instead of [t1, t2]

# Proposals:
# pt(parameters) [...]         "P"        ? ptPs, ptPm, ptP<>, ...
# pt(links)      [...]         "L"    ? ptLs, ptLm, ptL<>, ...

# Easy specification of additional print parameters e.g. "ppParam":true
#
##-----------------    PRINT Objective C
#command regex piXX    's/^(.+)$/expression -- pInfo(%1)/'          H E L P

##-----------------    retain counts (not precise, but often interesting and helpful)
command regex prc      's/^(.+)$/expression -- (int)[%1 retainCount]/'
#
##-----------------
#command alias ogl     expression -- ogl()

##-----------------    Print RAW
command alias  pr      frame v -R

########## ########## ########## ########## ########## ########## ########## 
# -- SUMMARIES:
type summary add --summary-string  "Part.name=${var.name}"  Part
type summary add --summary-string  "Vew.name=${var.name} part:${var.part.name}"  Vew
########## ########## ########## ########## ########## ########## ########## 
#
command     alias fwHelp 		expression fwHelp("?")
command     alias pFwConfig		expression printFwConfig()
command     alias pFwState		expression printFwState()

############################### FILE A BUG REPORT: Would like, but BROKEN. wanted badly:
#command alias lldbinit		command source ~/.lldbinit					# DOESN'T WORK
#command alias lldbinit		command source $(PROJECT_DIR)/LLDBInitFile	# DOESN'T WORK
command alias lldbinit		command source $(SRCROOT)/LLDBInitFile		# DOESN'T WORK
#command alias lldbinit		lldbinitFactals								# DOESN'T WORK

## allenM1:
command alias lldbinit			 	  command source ~/DocLocal/HaveNWant/Factals/LLDBInitFile
command alias lldbinitFactals	 	  command source ~/DocLocal/HaveNWant/Factals/LLDBInitFile
command alias lldbinitFooDocTry3	  command source ~/DocLocal/HaveNWant/FooDocTry3Clone/LLDBInitFile
command alias lldbinitSwiftFactals	  command source ~/DocLocal/HaveNWant/SwiftFactals/LLDBInitFile
command alias lldbinitFactalWorkbench command source ~/DocLocal/HaveNWant/FactalWorkbench/LLDBInitFile

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # LOADING .lldbinit for Factals COMPLETE # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# reload with  lldbinit  = '  command source ~/DocLocal/HaveNWant/Factals/LLDBInitFile '
#    N.B: Edit Schema; in tabs [run | debug]; in field 'lldb init file' enter:$(SRCROOT)/LLDBInitFile
## Common Commands: ptm, plv, ppn, pfs, ptPm, plLm
# :H: Character 1:   p- -: Pretty Print
# :H: Character 2:   -p -:.phrase; -l -:.line,          -t--:.tree,
# :H: Character 2:   -c -:classF;  -n -:name,           -f--:fullName, -i--:.id,aaaaaaa
# :H: Character 2.5: --L-:ppLinks; --P-:ppParameters
# :H: Character 3:   -- s:self;    ---m:root_Experiment ---v:root Vew  --n-:root SCNNode
## use LLDBrootPart("<name>") and LLDBrootVew("<name>") to find a part in tree
## pFwState, pFwConfig fwHelp("C")

